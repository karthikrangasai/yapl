<PROGRAM>					::= <FUNCTIONS>
<FUNCTIONS>					::= <FUNCTIONS> <FUNCTION> | <FUNCTION> | <MAIN>

<FUNCTION> 					::= "function" <RETURN_TYPE> "::" <FUNCTION_IDENTIFIER>  "(" <FUNCTION_PARAMETERS> ")"  "{\n" <COMPOUND_STATEMENTS> "}"  "end_definition\n"
<FUNCTION_PARAMETERS>		::= <PARAMETERS> | "void"
<PARAMETERS> 				::= <PARAMETER> | <PARAMETER> ","  <PARAMETERS>
<PARAMETER>					::= <DATA_TYPE> "::" <IDENTIFIER>

<COMPOUND_STATEMENTS> 		::= <STATEMENT> <COMPOUND_STATEMENTS> | <STATEMENT>
<STATEMENT> 				::= <BLOCK_STATEMENTS> | <SINGLE_LINE_STATEMENT> ";\n"

<BLOCK_STATEMENTS>			::= <BLOCK_STATEMENT>  "end\n"
<BLOCK_STATEMENT>			::= <CONDITIONAL_STATEMENTS> | <LOOP_STATEMENTS>
<CONDITIONAL_STATEMENTS> 	::=   "if"  "(" <LOGICAL_EXPRESSION> ")"  "{\n" <COMPOUND_STATEMENTS> "}"
								| "if"  "(" <LOGICAL_EXPRESSION> ")"  "{\n" <COMPOUND_STATEMENTS> "}"  "else"  "{\n" <COMPOUND_STATEMENTS> "}"
<LOOP_STATEMENTS> 			::=   "for"  "(" <INITIALIZATION_STATEMENT>  ";"  <LOGICAL_EXPRESSION>  ";"  <NUMERIC_EXPRESSION> ")"  "{\n" <COMPOUND_STATEMENTS> "}"
								| "while"  "(" <LOGICAL_EXPRESSION> ")"  "{\n" <COMPOUND_STATEMENTS> "}"

<SINGLE_LINE_STATEMENT>  	::= <BREAK_STATEMENTS> | <FUNCTION_CALL> | <INITIALIZATION_STATEMENTS> | <ARITH_STATEMENT>
<BREAK_STATEMENTS> 			::= "break" | "continue" | "return"  <EXPRESSION> | "return" "void"
<FUNCTION_CALL> 			::= <FUNCTION_IDENTIFIER> "(" <ARGUEMENTS> ")"
<ARGUEMENTS> 				::= "void" | <STRING> | <EXPRESSION> | <STRING> ","  <ARGUEMENTS> | <EXPRESSION> "," <ARGUEMENTS>

<INITIALIZATION_STATEMENTS> ::= <DECLARATION_STATEMENT> | <INITIALIZATION_STATEMENT>
<INITIALIZATION_STATEMENT> 	::=   <DECLARATION_STATEMENT>  ":="  <INITIAL_VALUE>
								| <TERMIMAL_EXPRESSION>  ":="  <INITIAL_VALUE>
<DECLARATION_STATEMENT> 	::= <DATA_TYPE> "::" <TERMIMAL_EXPRESSION> | <DATA_TYPE> "::" <TERMIMAL_EXPRESSIONS>
<TERMIMAL_EXPRESSIONS> 		::= <TERMIMAL_EXPRESSION> ","  <TERMIMAL_EXPRESSIONS> | <TERMIMAL_EXPRESSION>
<INITIAL_VALUE> 			::= <EXPRESSION> | "[" <ARRAY_INITIAL_VALUE> "]" | <STRING>
<ARRAY_INITIAL_VALUE> 		::= <INITIAL_VALUE> | <INITIAL_VALUE> ","  <ARRAY_INITIAL_VALUE>

<EXPRESSION> 				::= <LOGICAL_EXPRESSION> | <NUMERIC_EXPRESSION>
<LOGICAL_EXPRESSION>		::= <DISJUNCTION_EXPRESSION> | <LOGICAL_EXPRESSION>  <REL_EQ_OP>  <LOGICAL_EXPRESSION>
<DISJUNCTION_EXPRESSION>	::= <CONJUNCTION_EXPRESSION> | <DISJUNCTION_EXPRESSION> "||"  <DISJUNCTION_EXPRESSION>
<CONJUNCTION_EXPRESSION>	::= <NEGATION_EXPRESSION> | <CONJUNCTION_EXPRESSION> "&&"  <CONJUNCTION_EXPRESSION>
<NEGATION_EXPRESSION>		::= <LOGICAL_BRAKET_EXPRESSION> | "!" <NEGATION_EXPRESSION>
<LOGICAL_BRAKET_EXPRESSION>	::= <RELATIONAL_EXPRESSION> | "(" <LOGICAL_EXPRESSION> ")"
<RELATIONAL_EXPRESSION>		::= "(" <RELATIONAL_EXPRESSION> ")" | <TERMIMAL_EXPRESSION> | <BOOLEAN> | <NUMERIC_EXPRESSION>  <REL_OP>  <NUMERIC_EXPRESSION>
<NUMERIC_EXPRESSION>     	::= <SUBTRACTION_EXPRESSION> | <ARITH_STATEMENT>
<SUBTRACTION_EXPRESSION> 	::= <ADDITION_EXPRESSION> | <SUBTRACTION_EXPRESSION>  "-"  <SUBTRACTION_EXPRESSION>
<ADDITION_EXPRESSION>    	::= <MULTIPLICATION_EXPRESSION> | <ADDITION_EXPRESSION>  "+"  <ADDITION_EXPRESSION>
<MULTIPLICATION_EXPRESSION>     ::= <DIVISION_EXPRESSION> | <MULTIPLICATION_EXPRESSION>  "*"  <MULTIPLICATION_EXPRESSION>
<DIVISION_EXPRESSION> 		::= <FLOAT> | <MODULAR_EXPRESSION> | <DIVISION_EXPRESSION>  "/"  <DIVISION_EXPRESSION>
<MODULAR_EXPRESSION> 		::= <BITWISE_OR_EXPRESSION> | <MODULAR_EXPRESSION>  "%"  <MODULAR_EXPRESSION>
<BITWISE_OR_EXPRESSION>		::= <BITWISE_AND_EXPRESSION> | <BITWISE_OR_EXPRESSION>  "|"  <BITWISE_OR_EXPRESSION>
<BITWISE_AND_EXPRESSION>	::= <BITWISE_NEG_EXPRESSION> | <BITWISE_AND_EXPRESSION>  "&"  <BITWISE_AND_EXPRESSION>
<BITWISE_NEG_EXPRESSION> 	::= <NUMERIC_BRAKET_EXPRESSION> | "~" <BITWISE_NEG_EXPRESSION>
<NUMERIC_BRAKET_EXPRESSION>	::= <INTEGER> | <TERMIMAL_EXPRESSION> | "(" <NUMERIC_EXPRESSION> ")"

<ARITH_STATEMENT> 			::= <ARITH_U_OP> <NUMERIC_EXPRESSION>
<REL_OP> 					::= <REL_EQ_OP> | <REL_INEQ_OP>
<TERMIMAL_EXPRESSION> 		::= <IDENTIFIER> | <ARRAY_IDENTIFIER> | <FUNCTION_CALL>
<ARRAY_IDENTIFIER> 			::= <IDENTIFIER> "[" <INTEGER> "]" | <IDENTIFIER> "[" <IDENTIFIER> "]" | <IDENTIFIER> "[" <ARRAY_IDENTIFIER> "]"

<ARITH_U_OP>				::= "++" | "--"
<REL_EQ_OP>					::=  "=/=" | "="
<REL_INEQ_OP>				::= ">" | "<" | ">=" | "<="
<RETURN_TYPE>				::= <DATA_TYPE> | "void"
<DATA_TYPE>					::= "boolean" | "integer" | "float" | "string"
<BOOLEAN>					::= "true" | "false"

<IDENTIFIER>				::= [A-ZA-Z][_A-ZA-Z0-9]*
<FUNCTION_IDENTIFIER>		::= @[A-ZA-Z][_A-ZA-Z0-9]*

<INTEGER>					::= <POSITIVE_INTEGER> | <NEGATIVE_INTEGER>
<POSITIVE_INTEGER>			::= 0 | [1-9][0-9]*
<NEGATIVE_INTEGER>			::= "-" <POSITIVE_INTEGER>

<FLOAT>						::= <POSITIVE_FLOAT> | <NEGATIVE_FLOAT>
<POSITIVE_FLOAT>			::= (0 | [1-9][0-9]*).(0 | ([0-9]*[1-9]))
<NEGATIVE_FLOAT>			::= "-" <POSITIVE_FLOAT>

<STRING>					::= '["](.*)["]'